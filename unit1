In the early infancy year of computers, the command line was used as a form of communication through the use of teleprinters. In 1964 Bell Labs joined MIT and GE's computer department (which would later become Honeywell) to create the MULTICS (Multiplexed Information and Computing Service) project.
In 1964 MIT staffer Louis Pouzin wrote a paper how the MULTICS command language could be designed. He names this idea the shell. In 1965 a software engineer by the name of Glenda Schroeder with the help of an unnamed employee from GE developed the first MULTICS operating system shell.
In 1969 Bell Labs decides to withdraw from the project due to the prolonged costs and no quantifiable end date, although a small group of bell labs employees continued to work on the project on their own.

In 1971 the first UNIX shell called V6 shell was developed by Ken Thompson at Bell Labs. It was modeled after Glenda Schroeder's MULTICS shell. It had limitations because it did not have the ability to script. The bourne shell was introduced in 1977 and created by Stephen R Bourne at Bell Labs for V7 unix. It led to the development of Korn shell, Ash shell, and bash. Bourne's purpose for the development of the bourne shell was to serve as a command interpreter and to allow for scripting.

The command line interface (CLI) often left non-technical users feeling overwhelmed. It also lacked the usual feedback which led to user error. The graphical user interface (GUI) emerged as a solution to this problem, to make computers more user friendly to the general public. The first instance of a GUI was introduced in 1984 by Apple. It included icons, to represent files, folders, and applications. This allowed users to interact with the computer with a mouse. This cause Microsoft to the release their version of the GUI soon after Apple. Which began to push the CLI to the background. Cloud platforms like AWS and Azure rely on CLI tools to manage cloud resources, and it allows for automation of those resources. The CLI provides DevOps practices the ability to continuously integrate. While microservices benefit from CLI tools for manage and orchestrating clusters.
